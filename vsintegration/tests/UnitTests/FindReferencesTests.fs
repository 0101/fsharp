module FSharp.Editor.Tests.FindReferencesTests

open NUnit.Framework

open FSharp.Test.ProjectGeneration
open FSharp.Editor.Tests.Helpers

open Microsoft.CodeAnalysis.ExternalAccess.FSharp.Editor.FindUsages
open Microsoft.CodeAnalysis.ExternalAccess.FSharp.FindUsages

open Microsoft.VisualStudio.FSharp.Editor

open System.Threading.Tasks
open System.Threading
open System.IO
open System.Collections.Concurrent


let getPositionOf (subString: string) (filePath) =
    filePath
    |> File.ReadAllText
    |> fun source -> source.IndexOf subString


module FindReferences =

    let project = SyntheticProject.Create(
        { sourceFile "First" [] with
            SignatureFile = AutoGenerated
            ExtraSource = "let someFunc funcParam = funcParam * 1\n" +
                          "let sharedFunc funcParam = funcParam * 2\n"  },
        { sourceFile "Second" [] with
            ExtraSource = "let someFunc funcParam = funcParam * 1" },
        { sourceFile "Third" ["First"] with
            ExtraSource = "let someFunc x = ModuleFirst.sharedFunc x + 10" }
    )

    let solution, checker = RoslynTestHelpers.CreateSolution project

    let _projectDir = project.ProjectDir

    let findUsagesService = FSharpFindUsagesService() :> IFSharpFindUsagesService

    let getContext () =
        let foundDefinitions = ConcurrentBag()
        let foundReferences = ConcurrentBag()
        let context =
            { new IFSharpFindUsagesContext with

                member _.OnDefinitionFoundAsync (definition: FSharpDefinitionItem) =
                    foundDefinitions.Add definition
                    Task.CompletedTask

                member _.OnReferenceFoundAsync (reference: FSharpSourceReferenceItem) =
                    foundReferences.Add reference
                    Task.CompletedTask

                member _.ReportMessageAsync _ = Task.CompletedTask
                member _.ReportProgressAsync (_,_) = Task.CompletedTask
                member _.SetSearchTitleAsync _ = Task.CompletedTask

                member _.CancellationToken = CancellationToken.None
            }
        context, foundDefinitions, foundReferences

    [<Test>]
    let ``Find references to a document-local symbol`` () =

        let context, foundDefinitions, foundReferences = getContext()

        let documentPath = project.GetFilePath "Second"

        let document = solution.TryGetDocumentFromPath documentPath |> Option.defaultWith (fun _ -> failwith "Document not found")

        findUsagesService.FindReferencesAsync(document, getPositionOf "funcParam" documentPath, context).Wait()

        if foundDefinitions.Count <> 1 then failwith $"Expected 1 definition but found {foundDefinitions.Count}"
        if foundReferences.Count <> 1 then failwith $"Expected 1 reference but found {foundReferences.Count}"

    [<Test>]
    let ``Find references to a implementation + signature local symbol`` () =

        let context, foundDefinitions, foundReferences = getContext()

        let documentPath = project.GetFilePath "First"

        let document = solution.TryGetDocumentFromPath documentPath |> Option.defaultWith (fun _ -> failwith "Document not found")

        findUsagesService.FindReferencesAsync(document, getPositionOf "funcParam" documentPath, context).Wait()

        if foundDefinitions.Count <> 1 then failwith $"Expected 1 definition but found {foundDefinitions.Count}"
        if foundReferences.Count <> 2 // One in signature file, one in function body
            then failwith $"Expected 2 references but found {foundReferences.Count}"

    [<Test>]
    let ``Find references to a symbol in project`` () =
        let context, foundDefinitions, foundReferences = getContext()

        let documentPath = project.GetFilePath "First"

        let document = solution.TryGetDocumentFromPath documentPath |> Option.defaultWith (fun _ -> failwith "Document not found")

        findUsagesService.FindReferencesAsync(document, getPositionOf "sharedFunc" documentPath, context).Wait()

        if foundDefinitions.Count <> 1 then failwith $"Expected 1 definition but found {foundDefinitions.Count}"
        if foundReferences.Count <> 2 // One in signature file, one in Third file
            then failwith $"Expected 2 references but found {foundReferences.Count}"
